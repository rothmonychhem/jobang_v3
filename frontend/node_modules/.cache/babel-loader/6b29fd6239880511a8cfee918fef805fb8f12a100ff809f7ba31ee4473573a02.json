{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useEntrepriseContext } from \"./useEntrepriseContext\";\nexport const useInscriptionEntreprise = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false); // Initialiser à false\n  const {\n    dispatch\n  } = useEntrepriseContext();\n  const inscriptionEnt = async (nom_entreprise, nom_employeur, email_entreprise, telephone, adresse, mot_de_passeEntreprise) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/entreprise/inscriptionEntreprise', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          nom_entreprise,\n          nom_employeur,\n          email_entreprise,\n          telephone,\n          adresse,\n          mot_de_passeEntreprise\n        })\n      });\n      const json = await response.json();\n      if (!response.ok) {\n        setError(json.error);\n      } else {\n        // Si la réponse est ok\n        localStorage.setItem('entreprise', JSON.stringify(json));\n        dispatch({\n          type: 'LOGINENTREPRISE',\n          payload: json\n        });\n      }\n    } catch (err) {\n      setError(\"Une erreur s'est produite lors de l'inscription.\");\n    } finally {\n      setIsLoading(false); // Réinitialiser l'état de chargement\n    }\n  };\n  return {\n    inscriptionEnt,\n    isLoading,\n    error\n  };\n};\n_s(useInscriptionEntreprise, \"LmG0ON1XqF6zVpB+CfTYXwiN2bs=\", false, function () {\n  return [useEntrepriseContext];\n});","map":{"version":3,"names":["useState","useEntrepriseContext","useInscriptionEntreprise","_s","error","setError","isLoading","setIsLoading","dispatch","inscriptionEnt","nom_entreprise","nom_employeur","email_entreprise","telephone","adresse","mot_de_passeEntreprise","response","fetch","method","headers","body","JSON","stringify","json","ok","localStorage","setItem","type","payload","err"],"sources":["C:/Users/Lina/JobBangFINFOREAL/jobbanglinainesFIN-master/frontend/src/hooks/useInscriptionEntreprise.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useEntrepriseContext } from \"./useEntrepriseContext\"; \r\n\r\nexport const useInscriptionEntreprise = () => {\r\n    const [error, setError] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false); // Initialiser à false\r\n    const { dispatch } = useEntrepriseContext();\r\n\r\n    const inscriptionEnt = async (\r\n        nom_entreprise, \r\n        nom_employeur,\r\n        email_entreprise,\r\n        telephone,\r\n        adresse,\r\n        mot_de_passeEntreprise\r\n    ) => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const response = await fetch('/api/entreprise/inscriptionEntreprise', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    nom_entreprise, \r\n                    nom_employeur,\r\n                    email_entreprise,\r\n                    telephone,\r\n                    adresse,\r\n                    mot_de_passeEntreprise\r\n                })\r\n            });\r\n\r\n            const json = await response.json();\r\n\r\n            if (!response.ok) {\r\n                setError(json.error);\r\n            } else {\r\n                // Si la réponse est ok\r\n                localStorage.setItem('entreprise', JSON.stringify(json));\r\n                dispatch({ type: 'LOGINENTREPRISE', payload: json });\r\n            }\r\n        } catch (err) {\r\n            setError(\"Une erreur s'est produite lors de l'inscription.\");\r\n        } finally {\r\n            setIsLoading(false); // Réinitialiser l'état de chargement\r\n        }\r\n    };\r\n\r\n    return { inscriptionEnt, isLoading, error };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,oBAAoB,QAAQ,wBAAwB;AAE7D,OAAO,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACnD,MAAM;IAAEQ;EAAS,CAAC,GAAGP,oBAAoB,CAAC,CAAC;EAE3C,MAAMQ,cAAc,GAAG,MAAAA,CACnBC,cAAc,EACdC,aAAa,EACbC,gBAAgB,EAChBC,SAAS,EACTC,OAAO,EACPC,sBAAsB,KACrB;IACDR,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACA,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBZ,cAAc;UACdC,aAAa;UACbC,gBAAgB;UAChBC,SAAS;UACTC,OAAO;UACPC;QACJ,CAAC;MACL,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;MAElC,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QACdnB,QAAQ,CAACkB,IAAI,CAACnB,KAAK,CAAC;MACxB,CAAC,MAAM;QACH;QACAqB,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEL,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,CAAC;QACxDf,QAAQ,CAAC;UAAEmB,IAAI,EAAE,iBAAiB;UAAEC,OAAO,EAAEL;QAAK,CAAC,CAAC;MACxD;IACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;MACVxB,QAAQ,CAAC,kDAAkD,CAAC;IAChE,CAAC,SAAS;MACNE,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACzB;EACJ,CAAC;EAED,OAAO;IAAEE,cAAc;IAAEH,SAAS;IAAEF;EAAM,CAAC;AAC/C,CAAC;AAACD,EAAA,CA/CWD,wBAAwB;EAAA,QAGZD,oBAAoB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ines\\\\React\\\\jobbanglinainesFIN-main\\\\frontend\\\\src\\\\components\\\\Inscription\\\\Inscription.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Inscription.css\";\nimport NavBar from '../NavBar/NavBar';\nimport { useCandidatContext } from \"../../hooks/useCandidatContext\";\nimport { useInscriptionCandidat } from \"../../hooks/useInscriptionCandidat\";\n//import { useNavigate } from 'react-router-dom'; // Pour naviguer après la soumission\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Inscription = () => {\n  _s();\n  const {\n    dispatch\n  } = useCandidatContext();\n  const [nomCandidat, setNomCandidat] = useState('');\n  const [emailCandidat, setEmailCandidat] = useState('');\n  const [mot_de_passeCandidat, setMDPcandidat] = useState('');\n  const [inscriptionCad, error, isLoading] = useInscriptionCandidat();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    await inscriptionCad(nomCandidat, emailCandidat, mot_de_passeCandidat);\n    const candidat = {\n      nom_candidat: nomCandidat,\n      email_candidat: emailCandidat,\n      mot_de_passeCandidat: mot_de_passeCandidat\n    };\n    const response = await fetch('/api/candidat/', {\n      method: 'POST',\n      body: JSON.stringify(candidat),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const json = await response.json();\n    if (!response.ok) {}\n    if (response.ok) {\n      setNomCandidat('');\n      setEmailCandidat('');\n      setMDPcandidat('');\n      console.log('compte entreprise Ajouter mon amour');\n      dispatch({\n        type: 'SIGNUPCANDIDAT',\n        payload: json\n      });\n      // navigate('/cand');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inscription-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Inscription candidat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Nom du candidat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: nomCandidat,\n            onChange: e => setNomCandidat(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            value: emailCandidat,\n            onChange: e => setEmailCandidat(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Mot de passe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            value: mot_de_passeCandidat,\n            onChange: e => setMDPcandidat(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: isLoading,\n          type: \"submit\",\n          className: \"submit-btn\",\n          children: \"S'inscrire\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(Inscription, \"VEweJgSS0ylWcOq07aM+Ej0EBFE=\", false, function () {\n  return [useCandidatContext, useInscriptionCandidat];\n});\n_c = Inscription;\nexport default Inscription;\n\n/*\n\nfunction Inscription() {\n  const [userType] = useState(\"candidat\");\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate(); // Pour rediriger vers la page candidat\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (password !== confirmPassword) {\n      setError(\"*Les mots de passe ne correspondent pas. Veuillez réessayer.\");\n      return;\n    }\n    setError(\"\");\n    console.log(`Registering as ${userType} with name: ${name}, email: ${email}`);\n    navigate('/cand'); // Rediriger après l'inscription réussie\n  };\n\n  return (\n    <div>\n      <NavBar />\n      <div className=\"inscription-container\">\n        <h2>Inscription</h2>\n        <p>Candidat</p>\n        <form onSubmit={handleSubmit}>\n          <div className=\"input-group\">\n            <label>Nom</label>\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"input-group\">\n            <label>Email</label>\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"input-group\">\n            <label>Mot de passe</label>\n            <input\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"input-group\">\n            <label>Confirmer le mot de passe</label>\n            <input\n              type=\"password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              required\n            />\n            {error && <div className=\"error-message\">{error}</div>}\n          </div>\n          <button type=\"submit\" className=\"submit-btn\">S'inscrire</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Inscription;\n*/\nvar _c;\n$RefreshReg$(_c, \"Inscription\");","map":{"version":3,"names":["React","useState","NavBar","useCandidatContext","useInscriptionCandidat","jsxDEV","_jsxDEV","Inscription","_s","dispatch","nomCandidat","setNomCandidat","emailCandidat","setEmailCandidat","mot_de_passeCandidat","setMDPcandidat","inscriptionCad","error","isLoading","handleSubmit","e","preventDefault","candidat","nom_candidat","email_candidat","response","fetch","method","body","JSON","stringify","headers","json","ok","console","log","type","payload","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","value","onChange","target","required","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Ines/React/jobbanglinainesFIN-main/frontend/src/components/Inscription/Inscription.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Inscription.css\";\nimport NavBar from '../NavBar/NavBar';\nimport { useCandidatContext } from \"../../hooks/useCandidatContext\";\nimport { useInscriptionCandidat } from \"../../hooks/useInscriptionCandidat\";\n//import { useNavigate } from 'react-router-dom'; // Pour naviguer après la soumission\n\n\n\n\nconst Inscription = () => {\n  const {dispatch} = useCandidatContext()\n  const [nomCandidat,setNomCandidat] = useState('')\n  const [emailCandidat, setEmailCandidat] = useState('')\n  const [mot_de_passeCandidat, setMDPcandidat] = useState('')\n  const [inscriptionCad, error, isLoading]= useInscriptionCandidat()\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    await inscriptionCad(\n      nomCandidat,\n       emailCandidat, \n       mot_de_passeCandidat)\n\n\nconst candidat = {\n  nom_candidat:nomCandidat,\n  email_candidat:emailCandidat,\n  mot_de_passeCandidat:mot_de_passeCandidat\n\n}\n\nconst response = await fetch('/api/candidat/', {\n  method:'POST',\n  body: JSON.stringify(candidat),\n  headers:{\n      'Content-Type': 'application/json'\n  }\n})\nconst json = await response.json()\n\nif(!response.ok){\n      \n}\nif(response.ok){\n  setNomCandidat('')\n  setEmailCandidat('')\n  setMDPcandidat('')\n  console.log('compte entreprise Ajouter mon amour')\n  dispatch({type: 'SIGNUPCANDIDAT', payload:json})\n // navigate('/cand');\n}\n\n\n\n\n\n}\n\n\n  return (\n    <div>\n      <NavBar />\n      <div className=\"inscription-container\">\n        <h2>Inscription candidat</h2>\n        <form onSubmit={handleSubmit}>\n          <div className=\"input-group\">\n            <label>Nom du candidat</label>\n            <input\n              type=\"text\"\n              value={nomCandidat}\n              onChange={(e) => setNomCandidat(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"input-group\">\n            <label>Email</label>\n            <input\n              type=\"email\"\n              value={emailCandidat}\n              onChange={(e) => setEmailCandidat(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"input-group\">\n            <label>Mot de passe</label>\n            <input\n              type=\"password\"\n              value={mot_de_passeCandidat}\n              onChange={(e) => setMDPcandidat(e.target.value)}\n              required\n            />\n          </div>\n          <button disabled={isLoading} type=\"submit\" className=\"submit-btn\">S'inscrire</button>\n          {error && <p className=\"error\">{error}</p>}\n        </form>\n        \n      </div>\n    </div>\n  );\n};\n\nexport default Inscription;\n\n\n\n\n\n\n\n\n\n/*\n\nfunction Inscription() {\n  const [userType] = useState(\"candidat\");\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate(); // Pour rediriger vers la page candidat\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (password !== confirmPassword) {\n      setError(\"*Les mots de passe ne correspondent pas. Veuillez réessayer.\");\n      return;\n    }\n    setError(\"\");\n    console.log(`Registering as ${userType} with name: ${name}, email: ${email}`);\n    navigate('/cand'); // Rediriger après l'inscription réussie\n  };\n\n  return (\n    <div>\n      <NavBar />\n      <div className=\"inscription-container\">\n        <h2>Inscription</h2>\n        <p>Candidat</p>\n        <form onSubmit={handleSubmit}>\n          <div className=\"input-group\">\n            <label>Nom</label>\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"input-group\">\n            <label>Email</label>\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"input-group\">\n            <label>Mot de passe</label>\n            <input\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"input-group\">\n            <label>Confirmer le mot de passe</label>\n            <input\n              type=\"password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              required\n            />\n            {error && <div className=\"error-message\">{error}</div>}\n          </div>\n          <button type=\"submit\" className=\"submit-btn\">S'inscrire</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Inscription;\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}